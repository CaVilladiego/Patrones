generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  email     String   @unique
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments Enrollment[]
}

model Course {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  term      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nrcs Nrc[]
}

model Nrc {
  id        String   @id @default(uuid())
  courseId  String
  teacher   String
  schedule  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course      Course     @relation(fields: [courseId], references: [id])
  enrollments Enrollment[]
  assessments Assessment[]
}

model Enrollment {
  id        String   @id @default(uuid())
  studentId String
  nrcId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])
  nrc     Nrc     @relation(fields: [nrcId], references: [id])
  grades  Grade[]
}

model Assessment {
  id        String   @id @default(uuid())
  nrcId     String
  type      String   // parcial, final, proyecto, I+D
  maxScore  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nrc     Nrc      @relation(fields: [nrcId], references: [id])
  grades  Grade[]
}

model Grade {
  id           String     @id @default(uuid())
  assessmentId String
  enrollmentId String
  score        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
}
